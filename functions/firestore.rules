rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    match /USER/{userId} {
      allow read: if isUserSelf(userId) || isRootAdmin() || isOrganizationAdmin();
      allow create: if false;
      allow update: if (isUserSelf(userId) && disableUpdateKeys(["roles"])) || isRootAdmin() || (isOrganizationAdmin() && isNoOrganization(userId) && hasOnly(["organizationId", "updatedAt"]));
      allow delete: if isRootAdmin();
    }
    
    match /ORGANIZATION/{organizationId} {
      allow read: if isMember(organizationId);
      allow update: if isMember(organizationId) && isOrganizationAdmin();
      allow read, create, update, delete: if isRootAdmin();
    }
    
    match /ORGANIZATION_DATA/{organizationId}/{document=**} {
      allow read, create, update, delete: if isMember(organizationId)
    }
    
    match /EXPLOSIVE_OBJECT/{explosiveObjectId} {
    	allow read: if isAuth() && (isOrganization() || isRootAdmin());
      allow create: if isRootAdmin() || isOrganizationAdmin();
      allow update, delete: if isRootAdmin();
    }
    
    match /EXPLOSIVE/{explosiveId} {
      allow read: if isAuth() && (isOrganization() || isRootAdmin());
      allow create: if isRootAdmin() || isOrganizationAdmin();
      allow update, delete: if isRootAdmin();
    }

    function isAuth() {
      return request.auth != null;
    } 

    function isRootAdmin() {
      return request.auth.token.ROOT_ADMIN;
    }

    function isOrganizationAdmin() {
      return request.auth.token.ORGANIZATION_ADMIN;
    }

    function isMember(organizationId) {
      return request.auth.token.organizationId == organizationId;
    }

    function isOrganization() {
      return request.auth.token.organizationId != null;
    }
    
    function isUserSelf(userId) {
      return request.auth != null && request.auth.uid == userId;
    } 

    function isNoOrganization(userId) {
      let currentUserid = get(/databases/$(database)/documents/USER/$(userId)).data.organizationId;
      return currentUserid == null;
    }
    
    function hasOnly(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }

    function disableUpdateKeys(keys) {
      return (!request.resource.data.diff(resource.data).affectedKeys().hasAny(keys));
    }
    
    function isArrayEmpty(key){
    	return request.resource.data[key] is list && request.resource.data[key].size() == 0;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}