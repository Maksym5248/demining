rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
		match /APP_CONFIG/{id} {
    	allow read: if true;
      allow create: if false
      allow update: if false
      allow delete: if false
    }
    
    match /USER/{userId} {
      allow read: if isUserSelf(userId) || isRootAdmin() || isOrganizationAdmin();
      allow create: if false;
      allow update: if isUserSelf(userId) || isRootAdmin();
      allow delete: if isRootAdmin();
    }

    match /USER_ACCESS/{userId} {
      allow read: if isUserSelf(userId) || isRootAdmin() || isOrganizationAdmin();
      allow create: if false;
      allow update: if isRootAdmin();
      allow delete: if isRootAdmin();
    }
    
    match /ORGANIZATION/{organizationId} {
      allow read: if isMember(organizationId);
      allow update: if isMember(organizationId) && isOrganizationAdmin();
      allow read, create, update, delete: if isRootAdmin();
    }
    
    match /ORGANIZATION_DATA/{organizationId}/{document=**} {
      allow read, create, update, delete: if isMember(organizationId)
    }
    
    match /EXPLOSIVE_OBJECT/{id} {
    	allow read: if true;
      allow create: if isRootAdmin() || isOrganizationAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin()|| (isAmmoContentAdmin() && isAuthor("EXPLOSIVE_OBJECT", id));
      allow delete: if isRootAdmin();
    }
    
    match /EXPLOSIVE_OBJECT_DETAILS/{id} {
    	allow read: if true;
      allow create: if isRootAdmin() || isOrganizationAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin()|| (isAmmoContentAdmin() && isAuthor("EXPLOSIVE_OBJECT_DETAILS", id));
      allow delete: if isRootAdmin();
    }

    match /EXPLOSIVE_OBJECT_TYPE/{id} {
    	allow read: if true;
      allow create: if isRootAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor("EXPLOSIVE_OBJECT_TYPE", id));
      allow delete: if isRootAdmin();
    }

    match /EXPLOSIVE_OBJECT_CLASS/{id} {
    	allow read: if true;
      allow create: if isRootAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor("EXPLOSIVE_OBJECT_CLASS", id));
      allow delete: if isRootAdmin();
    }

    match /EXPLOSIVE_OBJECT_CLASS_ITEM/{id} {
    	allow read: if true;
      allow create: if isRootAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor("EXPLOSIVE_OBJECT_CLASS_ITEM", id));
      allow delete: if isRootAdmin();
    }
    
    match /EXPLOSIVE/{id} {
      allow read: if true;
      allow create: if isRootAdmin() || isOrganizationAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor("EXPLOSIVE", id));
      allow delete: if isRootAdmin();
    }

    match /EXPLOSIVE_NEW/{id} {
      allow read: if true;
      allow create: if isRootAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor("EXPLOSIVE_NEW", id));
      allow delete: if isRootAdmin();
    }
    
    match /BOOK/{id} {
      allow read: if true;
      allow create: if isRootAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor("BOOK", id));
      allow delete: if isRootAdmin();
    }

    function isAuth() {
      return request.auth != null;
    } 

    function isRootAdmin() {
      return request.auth.token.ROOT_ADMIN;
    }

    function isOrganizationAdmin() {
      return request.auth.token.ORGANIZATION_ADMIN;
    }

    function isAmmoContentAdmin() {
      return request.auth.token.AMMO_CONTENT_ADMIN;
    }
    
    function isAuthor(table, id){
      let currentId = get(/databases/$(database)/documents/$(table)/$(id)).data.authorId;
      return currentId == request.auth.uid;
    }

    function isMember(organizationId) {
      return request.auth.token.organizationId == organizationId;
    }

    function isOrganization() {
      return request.auth.token.organizationId != null;
    }
    
    function isUserSelf(userId) {
      return request.auth != null && request.auth.uid == userId;
    } 

    function isNoOrganization(userId) {
      let currentUserid = get(/databases/$(database)/documents/USER/$(userId)).data.organizationId;
      return currentUserid == null;
    }
    
    function hasOnly(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }

    function disableUpdateKeys(keys) {
      return (!request.resource.data.diff(resource.data).affectedKeys().hasAny(keys));
    }
    
    function isArrayEmpty(key){
    	return request.resource.data[key] is list && request.resource.data[key].size() == 0;
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}