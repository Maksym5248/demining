rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
		match /APP_CONFIG/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /COMPLAIN/{id} {
    	allow read: if isAuth();
      allow create: if isAuth();
      allow update, delete: if false
    }

    match /COMMENT/LANG/{lang}/{id} {
    	allow read: if isAuth();
      allow create: if isAuth();
      allow update: if isAuth() && disableUpdateKeys(['id', "type", "authorId", "entityId", "replyCount", 'originalLang']);
      allow delete: if false;
    }

    match /BOOK_TYPE/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /COUNTRY/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /EXPLOSIVE_DEVICE_TYPE/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /EXPLOSIVE_OBJECT_COMPONENT/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /MATERIAL/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /MISSION_REQUEST_TYPE/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /RANKS/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /STATUSES/LANG/{lang}/{id} {
    	allow read: if true;
      allow create, update, delete: if false
    }

    match /USER_ACCESS/{userId} {
      allow read: if isUserSelf(userId) || isRootAdmin() || isOrganizationAdmin();
      allow create: if false;
      allow update: if (disableUpdateKeys(['ROOT_ADMIN']) && isRootAdmin());
      allow delete: if isRootAdmin();
    }

    match /USER_INFO/{userId} {
      allow read: if isAuth();
      allow create: if false;
      allow update: if (disableUpdateKeys(['id', "email", "createdAt"]) && isUserSelf(userId)) || isRootAdmin();
      allow delete: if isRootAdmin();
    }

    match /MEMBER/{userId} {
      allow read: if isUserSelf(userId) || isRootAdmin() || isOrganizationAdmin();
      allow create: if false;
      allow update: if isRootAdmin() || (isNoOrganization() && enableUpdateKey(["organizationId", "updatedAt"]) && isOrganizationAdmin()) || (isSameOrganization() && enableUpdateKey(["organizationId", "updatedAt"]) && isOrganizationAdmin());
      allow delete: if isRootAdmin();
    }
    
    match /ORGANIZATION/{organizationId} {
      allow read: if isRootAdmin() || isMember(organizationId);
      allow update: if isRootAdmin() || isMember(organizationId) && isOrganizationAdmin();
      allow read, create, update, delete: if isRootAdmin();
    }
    
    match /ORGANIZATION_DATA/{organizationId}/{document=**} {
      allow read, create, update, delete: if isMember(organizationId)
    }
    
    match /EXPLOSIVE_OBJECT/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }
    
    match /EXPLOSIVE_OBJECT_DETAILS/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_OBJECT_TYPE/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_OBJECT_CLASS/{id} {
    	allow read: if true;
      allow create: if isRootAdmin() || isAmmoContentAdmin();
      allow update: if isRootAdmin() || (isAmmoContentAdmin() && isAuthor());
      allow delete: if isRootAdmin();
    }

    match /EXPLOSIVE_OBJECT_CLASS_ITEM/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }
    
    match /EXPLOSIVE/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_NEW/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

     match /EXPLOSIVE_OBJECT_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }
    
    match /EXPLOSIVE_OBJECT_DETAILS_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_OBJECT_TYPE_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_OBJECT_CLASS_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_OBJECT_CLASS_ITEM_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }
    
    match /EXPLOSIVE_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    match /EXPLOSIVE_NEW_v2/LANG/{lang}/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }
    
    match /BOOK/{id} {
      allow read: if true;
      allow create: if isAmmoContentAdmin() || isAmmoAuthor();
      allow update: if isAmmoContentAdmin() || (isAmmoAuthor() && isAuthor());
      allow delete: if isAmmoContentAdmin();
    }

    function isAuth() {
      return request.auth != null;
    } 

    function isRootAdmin() {
      return request.auth.token.ROOT_ADMIN;
    }

    function isOrganizationAdmin() {
      return request.auth.token.ORGANIZATION_ADMIN;
    }

    function isAmmoContentAdmin() {
      return request.auth.token.AMMO_CONTENT_ADMIN;
    }

    function isAmmoAuthor() {
      return request.auth.token.AMMO_AUTHOR;
    }
    
    function isAuthor(){
      return resource.data.authorId == request.auth.uid;
    }

    function isMember(organizationId) {
      return request.auth.token.organizationId == organizationId;
    }

    function isOrganization() {
      return request.auth.token.organizationId != null;
    }
    
    function isUserSelf(userId) {
      return request.auth != null && request.auth.uid == userId;
    } 

    function isNoOrganization() {
      return resource.data.organizationId == null;
    }

    function isSameOrganization() {
      return request.auth.token.organizationId == resource.data.organizationId;
    }
    
    function hasOnly(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }

    function disableUpdateKeys(keys) {
      return (!request.resource.data.diff(resource.data).affectedKeys().hasAny(keys));
    }
    
    function enableUpdateKey(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasAny(keys);
    }
    
    function isArrayEmpty(key){
    	return request.resource.data[key] is list && request.resource.data[key].size() == 0;
    }

    function doc(collection, id){
      return get(/databases/$(database)/documents/$(collection)/$(id));
    }
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}